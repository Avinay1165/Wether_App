{"version":3,"sources":["logo.svg","components/CityInput/index.js","components/CityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","React","useState","error","setError","Container","Form","Group","controlId","Label","Control","value","type","placeholder","onChange","event","target","className","Button","variant","onClick","CityWeather","props","cod","name","Math","round","main","temp","weather","description","App","cityWeather","setCityWeather","fetch","then","res","json","result","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,oCC6CAA,EAzCC,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,iBAAqB,EAC1BC,IAAMC,SAAS,IADW,mBAC3CC,EAD2C,KACpCC,EADoC,KAmBlD,OACI,cAACC,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,WACA,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CACIC,MAAOb,EACPc,KAAK,OACLC,YAAY,aACZC,SA1BY,SAACC,GACrBhB,EAAQgB,EAAMC,OAAOL,UA2BjB,mBAAGM,UAAU,cAAb,SAA4Bd,OAGhC,cAACe,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QA5BZ,WAEVtB,GAMAM,EAAS,IACTJ,KALAI,EAAS,wBAwBb,0BCpBOiB,EAfG,SAACC,GACf,OACI,eAACjB,EAAA,EAAD,WACA,uBACyB,MAAxBiB,EAAMD,YAAYE,IACnB,gCACA,4BAAG,iCAAUD,EAAMD,YAAYG,SAC/B,kDAAoB,iCAASC,KAAKC,MAAMJ,EAAMD,YAAYM,KAAKC,QAA/D,qBAAiGN,EAAMD,YAAYQ,QAAQ,GAAGC,kBAEvH,SCuBAC,MA5Bf,WAAgB,IAAD,EACS9B,IAAMC,SAAS,IADxB,mBACNJ,EADM,KACAC,EADA,OAEuBE,IAAMC,SAAS,IAFtC,mBAEN8B,EAFM,KAEOC,EAFP,KAeb,OACE,qCACD,cAAC,EAAD,CACCnC,KAAMA,EACNC,QAASA,EACTC,iBAjBqB,WACrBkC,MAAM,qDAAD,OACkDpC,EADlD,4CAGJqC,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAChBF,MAAK,SAACG,GACLL,EAAeK,GACdC,QAAQC,IAAIF,SAYhB,cAAC,EAAD,CACAjB,YAAaW,QCjBDS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fa798831.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//import { Button } from \"bootstrap\";\r\nimport React from \"react\";\r\nimport { Form,Button, Container} from \"react-bootstrap\";\r\n\r\nconst CityInput=({city, setCity, fetchCityWeather}) =>{\r\n    const [error, setError]=React.useState(\"\");\r\n    const handleInputChange=(event)=>{\r\n        setCity(event.target.value);\r\n    }\r\n    const handleClick=() =>{\r\n        //logic to see id field is empty\r\n        if(!city)\r\n        {\r\n            setError(\"City field is empty\");\r\n        }\r\n        else\r\n        {\r\n            setError(\"\");\r\n            fetchCityWeather();\r\n        }\r\n    }\r\n\r\n    //console.log(city);\r\n    return(\r\n        <Container>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>City</Form.Label>\r\n            <Form.Control\r\n                value={city} \r\n                type=\"text\" \r\n                placeholder=\"Enter City\" \r\n                onChange={handleInputChange}\r\n            />\r\n            <p className=\"text-danger\">{error}</p>\r\n            </Form.Group>\r\n\r\n        <Button variant=\"primary\" onClick={handleClick}>\r\n            Submit\r\n        </Button>\r\n        </Form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CityInput;","import React from \"react\";\r\nimport {  Container} from \"react-bootstrap\";\r\nconst CityWeather=(props) =>{\r\n    return(\r\n        <Container>\r\n        <br/>\r\n        {props.CityWeather.cod===200 ?\r\n        <div>\r\n        <p><strong>{ props.CityWeather.name}</strong></p>\r\n        <p> It is currently <strong>{Math.round(props.CityWeather.main.temp)}</strong> degrees out with {props.CityWeather.weather[0].description}\r\n        </p>\r\n        </div>:null\r\n        }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CityWeather;","import logo from './logo.svg';\nimport React from \"react\";\nimport './App.css';\nimport CityInput from './components/CityInput';\nimport CityWeather from './components/CityWeather';\n\nfunction App() {\n  const [city, setCity]=React.useState(\"\");\n  const [cityWeather, setCityWeather]=React.useState(\"\");\n  const fetchCityWeather=() =>{\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=4c496af33d732297c30b641b3b235e47`\n    )\n    .then((res)=>res.json())\n    .then((result) => {\n      setCityWeather(result);\n       console.log(result);\n      \n    })\n\n  };\n  return (\n    <>\n   <CityInput \n    city={city} \n    setCity={setCity}\n    fetchCityWeather={fetchCityWeather}\n   />\n   <CityWeather\n   CityWeather={cityWeather} />\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}